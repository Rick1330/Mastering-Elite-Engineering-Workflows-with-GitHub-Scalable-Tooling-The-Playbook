{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Mastering Elite Engineering Workflows","text":"<p>Last updated: 2025-08-22</p>"},{"location":"#executive-summary","title":"Executive Summary","text":"<p>This playbook provides a production-ready framework to architect, implement, and scale elite engineering practices on GitHub. It distills proven patterns for code review, CI/CD automation, governance, repository structure, and metrics/DevEx into an actionable toolkit with runnable examples and automated documentation publishing.</p>"},{"location":"#audience","title":"Audience","text":"<ul> <li>Engineering leaders and architects who define standards and governance</li> <li>Staff/principal engineers who design CI/CD and tooling</li> <li>Senior engineers who drive day-to-day code quality and delivery</li> </ul>"},{"location":"#how-to-adopt-in-30-minutes","title":"How to Adopt in 30 Minutes","text":"<ol> <li>Fork or clone this repo and enable GitHub Actions.</li> <li>Copy the <code>.github/</code> workflows and templates to your repositories.</li> <li>Customize <code>CODEOWNERS</code> and branch protection rules to match your team.</li> <li>Review <code>CONTRIBUTING.md</code> to align review tiers, SLAs, and checklists.</li> <li>Build the docs site locally: <code>pip install -r docs/requirements.txt &amp;&amp; mkdocs build</code>.</li> <li>Publish via GitHub Pages using the provided workflow.</li> </ol>"},{"location":"#whats-inside","title":"What\u2019s Inside","text":"<ul> <li>Code Review &amp; Collaboration best practices</li> <li>GitHub Actions CI/CD patterns and deployment examples</li> <li>Governance and security guardrails (CODEOWNERS, branch protection)</li> <li>Repository structure guidance for scale</li> <li>Metrics and Developer Experience (DORA + surveys)</li> </ul> <p>Use the left navigation to explore each area in depth.</p>"},{"location":"01-code-review/","title":"Code Review &amp; Collaboration: Elite Engineering Practices","text":""},{"location":"01-code-review/#introduction","title":"Introduction","text":"<p>Code review is a cornerstone of high-quality software development, serving as both a quality control mechanism and a knowledge-sharing practice. For elite engineering teams, code review is not merely a checkpoint but a collaborative process that enhances code quality, spreads knowledge, and builds team cohesion. This section outlines best practices for structuring code reviews, defining reviewer roles, optimizing review workflows, and integrating automation to create a scalable, efficient review process.</p>"},{"location":"01-code-review/#review-protocols-by-change-type-and-risk-level","title":"Review Protocols by Change Type and Risk Level","text":""},{"location":"01-code-review/#tiered-review-framework","title":"Tiered Review Framework","text":"<p>Elite engineering teams implement a tiered review framework that scales the intensity of review based on the risk and complexity of changes:</p> Change Type Risk Level Review Protocol Reviewers Required SLA Documentation Low Light review 1 reviewer 4 hours Test additions Low Standard review 1 reviewer 8 hours Bug fixes Medium Standard review 1-2 reviewers 8 hours New features High Thorough review 2+ reviewers 24 hours Core architecture Critical Deep review 2+ reviewers + architect 48 hours Security-related Critical Security review 2+ reviewers + security expert 24 hours <p>Implementation Note: This framework should be documented in your CONTRIBUTING.md file and enforced through branch protection rules and PR templates.</p>"},{"location":"01-code-review/#small-team-implementation-3-7-engineers","title":"Small Team Implementation (3-7 engineers)","text":"<p>For small teams, simplify the framework to three tiers: - Light: Documentation, tests (1 reviewer) - Standard: Bug fixes, small features (1 reviewer) - Thorough: New features, architecture changes (all available team members)</p>"},{"location":"01-code-review/#scaling-to-larger-teams-10-30-engineers","title":"Scaling to Larger Teams (10-30+ engineers)","text":"<p>As teams grow: - Introduce domain experts as required reviewers for specific areas - Implement CODEOWNERS to automatically assign reviewers - Add specialized review for cross-cutting concerns (performance, accessibility, security) - Consider a \"review buddy\" system for junior engineers</p>"},{"location":"01-code-review/#reviewer-roles-and-responsibilities","title":"Reviewer Roles and Responsibilities","text":""},{"location":"01-code-review/#primary-reviewer","title":"Primary Reviewer","text":"<p>The primary reviewer is responsible for: - Comprehensive code examination - Ensuring code meets functional requirements - Verifying test coverage - Checking for edge cases - Providing timely feedback (within SLA)</p>"},{"location":"01-code-review/#secondary-reviewer","title":"Secondary Reviewer","text":"<p>The secondary reviewer focuses on: - Architectural consistency - Design patterns - Performance implications - Security considerations - Cross-functional requirements</p>"},{"location":"01-code-review/#code-owner","title":"Code Owner","text":"<p>When using CODEOWNERS, the designated owner: - Is automatically assigned to relevant PRs - Has final approval authority for their domain - Ensures consistency across the codebase - May delegate reviews but maintains accountability</p>"},{"location":"01-code-review/#expert-reviewer","title":"Expert Reviewer","text":"<p>For specialized concerns: - Security expert: Reviews security-sensitive changes - Performance expert: Evaluates performance-critical code - Accessibility expert: Ensures accessibility standards - UX expert: Reviews user-facing changes</p>"},{"location":"01-code-review/#review-latency-and-slas","title":"Review Latency and SLAs","text":""},{"location":"01-code-review/#target-metrics","title":"Target Metrics","text":"<p>Elite teams establish clear expectations for review turnaround:</p> Team Size Priority Target First Response Target Resolution Small (3-7) Normal 4 business hours 1 business day Small (3-7) High 2 business hours 4 business hours Mid-sized (10-30) Normal 8 business hours 2 business days Mid-sized (10-30) High 4 business hours 1 business day Large (30+) Normal 24 business hours 3 business days Large (30+) High 8 business hours 1 business day <p>Implementation Tip: Use GitHub labels to indicate priority and integrate with Slack or MS Teams for high-priority notifications.</p>"},{"location":"01-code-review/#reducing-review-bottlenecks","title":"Reducing Review Bottlenecks","text":"<p>To maintain flow and prevent bottlenecks:</p> <ol> <li>Review rotation: Designate \"review focus days\" for team members</li> <li>Pair reviews: Conduct synchronous pair reviews for complex changes</li> <li>Time blocking: Schedule dedicated review time in calendars</li> <li>WIP limits: Limit the number of open PRs per developer</li> <li>Review swarms: For critical changes, gather the team for a focused review session</li> </ol>"},{"location":"01-code-review/#effective-pr-templates-and-checklists","title":"Effective PR Templates and Checklists","text":""},{"location":"01-code-review/#basic-pr-template-structure","title":"Basic PR Template Structure","text":"<pre><code>## Description\n[Provide a brief description of the changes in this PR]\n\n## Related Issues\n[Link to any related issues, e.g., \"Fixes #123\"]\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Breaking change\n- [ ] Documentation update\n\n## How Has This Been Tested?\n[Describe the tests that you ran]\n\n## Checklist\n- [ ] My code follows the project's style guidelines\n- [ ] I have performed a self-review\n- [ ] I have added tests that prove my fix/feature works\n- [ ] New and existing tests pass locally\n- [ ] Documentation has been updated (if applicable)\n</code></pre>"},{"location":"01-code-review/#advanced-pr-template-for-larger-teams","title":"Advanced PR Template for Larger Teams","text":"<p>For mid-sized to large teams, enhance the template with:</p> <pre><code>## Risk Assessment\n- [ ] Low: Isolated change with minimal impact\n- [ ] Medium: New feature with moderate scope\n- [ ] High: Core functionality or wide-reaching changes\n\n## Performance Considerations\n[Describe any performance implications]\n\n## Security Considerations\n[Describe any security implications]\n\n## Rollout Plan\n- [ ] Standard deployment\n- [ ] Phased rollout\n- [ ] Feature flag controlled\n\n## Post-Deployment Verification\n[Describe how to verify the changes in production]\n</code></pre>"},{"location":"01-code-review/#project-specific-templates","title":"Project-Specific Templates","text":"<p>Elite teams maintain specialized templates for different project types:</p> <ul> <li>Frontend template: Includes browser compatibility, accessibility, and design fidelity checks</li> <li>Backend template: Focuses on API contracts, database changes, and performance</li> <li>Infrastructure template: Emphasizes security, scalability, and disaster recovery</li> <li>Open-source template: Includes community impact, backward compatibility, and documentation</li> </ul>"},{"location":"01-code-review/#ci-integration-with-code-review","title":"CI Integration with Code Review","text":""},{"location":"01-code-review/#automated-checks","title":"Automated Checks","text":"<p>Integrate these automated checks into your PR workflow:</p> <ol> <li>Linting and formatting: Enforce code style consistency</li> <li>Unit and integration tests: Verify functionality</li> <li>Code coverage: Ensure adequate test coverage</li> <li>Static analysis: Identify potential bugs and vulnerabilities</li> <li>Dependency scanning: Check for vulnerable dependencies</li> <li>Performance benchmarks: Detect performance regressions</li> </ol>"},{"location":"01-code-review/#github-actions-integration-example","title":"GitHub Actions Integration Example","text":"<pre><code>name: PR Checks\n\non:\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n      - name: Install dependencies\n        run: npm ci\n      - name: Lint\n        run: npm run lint\n      - name: Test\n        run: npm test\n      - name: Check coverage\n        run: npm run coverage\n      - name: Static analysis\n        run: npm run analyze\n</code></pre>"},{"location":"01-code-review/#required-status-checks","title":"Required Status Checks","text":"<p>Configure branch protection rules to require: - All CI checks pass - Required number of approvals - No stale approvals after new commits - Resolved conversations</p>"},{"location":"01-code-review/#effective-feedback-patterns","title":"Effective Feedback Patterns","text":""},{"location":"01-code-review/#constructive-feedback-framework","title":"Constructive Feedback Framework","text":"<p>Elite teams follow a structured approach to feedback:</p> <ol> <li>Observation: Describe what you see in the code</li> <li>Impact: Explain the potential impact or concern</li> <li>Question or suggestion: Offer a constructive alternative</li> <li>Rationale: Provide reasoning or link to documentation</li> </ol> <p>Example:</p> <p>I notice this function mutates the input parameter (observation). This could lead to unexpected side effects for callers (impact). Could we create a copy of the object first before modifying it (suggestion)? This would maintain the principle of least surprise and prevent potential bugs (rationale).</p>"},{"location":"01-code-review/#feedback-anti-patterns-to-avoid","title":"Feedback Anti-Patterns to Avoid","text":"Anti-Pattern Example Better Alternative Nitpicking \"Use camelCase here\" Focus on substantive issues or automate style checks Vague feedback \"This doesn't look right\" \"This approach might cause issues with concurrent access because...\" Personal criticism \"Why would you do it this way?\" \"This approach has some challenges. Have you considered...?\" Overwhelming feedback 50+ comments on a PR Prioritize feedback and consider pair programming for complex changes"},{"location":"01-code-review/#collaborative-review-models","title":"Collaborative Review Models","text":""},{"location":"01-code-review/#pair-programming-and-review","title":"Pair Programming and Review","text":"<p>For complex changes, elite teams use pair programming as a proactive review strategy: - Driver/Navigator: One person codes while the other reviews in real-time - Ping-Pong: Alternating between writing tests and implementation - Mob Programming: Multiple team members collaborate on a single change</p>"},{"location":"01-code-review/#review-workshops","title":"Review Workshops","text":"<p>For architectural or high-impact changes: - Schedule dedicated review sessions - Use screen sharing and collaborative tools - Document decisions and rationales - Include stakeholders beyond the immediate team</p>"},{"location":"01-code-review/#automated-review-assistance","title":"Automated Review Assistance","text":""},{"location":"01-code-review/#ai-assisted-code-review","title":"AI-Assisted Code Review","text":"<p>Elite teams leverage AI tools to enhance (not replace) human review: - GitHub Copilot for code suggestions - Static analysis tools for common issues - Automated PR summaries for context - Vulnerability scanning for security issues</p>"},{"location":"01-code-review/#custom-review-automation","title":"Custom Review Automation","text":"<p>Consider building custom tooling for project-specific needs: - Automated test generation - Documentation verification - API contract validation - Performance regression detection</p>"},{"location":"01-code-review/#scaling-code-review","title":"Scaling Code Review","text":""},{"location":"01-code-review/#small-team-approach-3-7-engineers","title":"Small Team Approach (3-7 engineers)","text":"<p>For small teams, focus on: - Everyone reviews everything (shared context) - Informal, frequent reviews - Synchronous pair reviews for complex changes - Simple tooling and minimal process</p>"},{"location":"01-code-review/#mid-sized-team-approach-10-30-engineers","title":"Mid-Sized Team Approach (10-30 engineers)","text":"<p>As teams grow: - Implement CODEOWNERS for domain expertise - Establish formal review protocols - Create specialized review checklists - Invest in automation and tooling</p>"},{"location":"01-code-review/#large-team-approach-30-engineers","title":"Large Team Approach (30+ engineers)","text":"<p>For large organizations: - Hierarchical review structure (team, domain, architecture) - Dedicated review teams for critical components - Comprehensive automation and metrics - Cross-team review coordination</p>"},{"location":"01-code-review/#anti-patterns-and-warning-signs","title":"Anti-Patterns and Warning Signs","text":""},{"location":"01-code-review/#process-anti-patterns","title":"Process Anti-Patterns","text":"<ul> <li>Rubber-stamping: Approvals without meaningful review</li> <li>Review bottlenecks: PRs waiting days for review</li> <li>Scope creep: Massive PRs that are impossible to review effectively</li> <li>Ping-pong reviews: Endless back-and-forth without resolution</li> <li>Tribal knowledge: Reviews that enforce undocumented standards</li> </ul>"},{"location":"01-code-review/#warning-signs-in-review-culture","title":"Warning Signs in Review Culture","text":"<ul> <li>Defensive responses to feedback</li> <li>Reviews that focus only on style, not substance</li> <li>Inconsistent standards between reviewers</li> <li>Reviews becoming a blocker rather than an enabler</li> <li>Lack of knowledge sharing during reviews</li> </ul>"},{"location":"01-code-review/#expert-notes-code-review-as-a-learning-tool","title":"Expert Notes: Code Review as a Learning Tool","text":"<p>Elite Team Insight: The most effective engineering teams view code review not just as quality control but as their primary knowledge-sharing mechanism. Reviews should be a conversation, not a gatekeeping exercise.</p> <p>Scaling Tip: As your team grows beyond 10 engineers, invest early in automation and clear processes. The review patterns that work for a team of 5 will break down completely at 20+ engineers without deliberate scaling.</p> <p>Cultural Note: Code review is where your engineering culture becomes visible. If reviews are respectful, thorough, and collaborative, that reflects a healthy engineering culture. If they're combative, superficial, or avoided, that signals deeper problems.</p>"},{"location":"01-code-review/#implementation-checklist","title":"Implementation Checklist","text":""},{"location":"01-code-review/#day-1-setup","title":"Day 1 Setup","text":"<ul> <li> Create basic PR template</li> <li> Configure branch protection requiring reviews</li> <li> Document review expectations in CONTRIBUTING.md</li> <li> Set up essential CI checks (linting, tests)</li> </ul>"},{"location":"01-code-review/#small-team-evolution","title":"Small Team Evolution","text":"<ul> <li> Implement review SLAs</li> <li> Create specialized PR templates</li> <li> Add code coverage checks</li> <li> Establish review rotation</li> </ul>"},{"location":"01-code-review/#scaling-to-mid-sized-teams","title":"Scaling to Mid-sized Teams","text":"<ul> <li> Implement CODEOWNERS</li> <li> Create domain-specific review checklists</li> <li> Add advanced CI checks</li> <li> Establish metrics for review quality and speed</li> </ul>"},{"location":"01-code-review/#large-organization-governance","title":"Large Organization Governance","text":"<ul> <li> Create hierarchical review structure</li> <li> Implement cross-team review coordination</li> <li> Establish review standards and training</li> <li> Build custom review automation</li> </ul> <p>Last updated: 2025-08-22</p>"},{"location":"02-actions-automation/","title":"GitHub Actions &amp; Automation: Building Elite CI/CD Pipelines","text":""},{"location":"02-actions-automation/#introduction","title":"Introduction","text":"<p>GitHub Actions provides a powerful automation platform that enables elite engineering teams to build, test, and deploy their code directly from GitHub repositories. This section outlines advanced strategies for designing robust CI/CD pipelines, including multi-environment deployments, and leveraging GitHub Actions' full potential to create scalable, secure, and efficient workflows.</p>"},{"location":"02-actions-automation/#designing-robust-ci-pipelines","title":"Designing Robust CI Pipelines","text":""},{"location":"02-actions-automation/#core-ci-pipeline-architecture","title":"Core CI Pipeline Architecture","text":"<p>Elite engineering teams structure their CI pipelines with clear, distinct stages that provide rapid feedback and ensure code quality:</p> <pre><code># .github/workflows/ci.yml\nname: CI Pipeline\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Lint\n        run: npm run lint\n\n  test:\n    needs: validate\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: '20'\n          cache: 'npm'\n      - name: Install dependencies\n        run: npm ci\n      - name: Run tests\n        run: npm test\n\n  build:\n    needs: test\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Build\n        run: npm run build\n      - name: Upload build artifacts\n        uses: actions/upload-artifact@v4\n        with:\n          name: build-artifacts\n          path: dist/\n</code></pre>"},{"location":"02-actions-automation/#pipeline-stages-and-responsibilities","title":"Pipeline Stages and Responsibilities","text":"<p>For maximum efficiency, elite teams separate their CI pipelines into distinct stages:</p> <ol> <li>Validation Stage</li> <li>Linting and code style checks</li> <li>Type checking</li> <li>Dependency vulnerability scanning</li> <li> <p>Compliance checks</p> </li> <li> <p>Testing Stage</p> </li> <li>Unit tests</li> <li>Integration tests</li> <li>Component tests</li> <li> <p>Coverage reporting</p> </li> <li> <p>Build Stage</p> </li> <li>Compilation and bundling</li> <li>Asset optimization</li> <li>Artifact creation</li> <li> <p>Container image building</p> </li> <li> <p>Quality Gate Stage</p> </li> <li>Performance testing</li> <li>Accessibility testing</li> <li>Security testing</li> <li>Documentation verification</li> </ol>"},{"location":"02-actions-automation/#smart-caching-strategies","title":"Smart Caching Strategies","text":""},{"location":"02-actions-automation/#nodejs-example","title":"Node.js Example","text":"<pre><code>- name: Cache Node.js modules\n  uses: actions/cache@v3\n  with:\n    path: ~/.npm\n    key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n    restore-keys: |\n      ${{ runner.os }}-node-\n</code></pre>"},{"location":"02-actions-automation/#python-example","title":"Python Example","text":"<pre><code>- name: Cache Python dependencies\n  uses: the actions/cache@v3\n  with:\n    path: ~/.cache/pip\n    key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n    restore_keys: |\n      ${{ runner.os }}-pip-\n</code></pre>"},{"location":"02-actions-automation/#docker-layer-caching","title":"Docker Layer Caching","text":"<pre><code># Dockerfile\nFROM node:18-alpine\nWORKDIR /app\nCOPY package.json package-lock.json ./\nRUN npm ci --only=production\nCOPY . .\nRUN npm run build\nCMD [\"node\", \"dist/main.js\"]\n</code></pre>"},{"location":"02-actions-automation/#advanced-deployment-patterns","title":"Advanced Deployment Patterns","text":""},{"location":"02-actions-automation/#multi-environment-deployments","title":"Multi-Environment Deployments","text":"<p>Elite teams manage deployments across multiple environments (dev, staging, production) using GitHub Actions:</p> <pre><code># .github/workflows/deploy.yml\nname: Deploy to Environments\n\non:\n  push:\n    branches: [ main ]\n\nenv:\n  AWS_REGION: us-east-1\n\njobs:\n  deploy-staging:\n    runs-on: ubuntu-latest\n    environment: staging\n    steps:\n      - uses: actions/checkout@v4\n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v4\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_KEY_ID }}\n          aws-region: ${{ env.AWS_REGION }}\n      - name: Deploy to Staging\n        run: | \n          aws s3 sync ./build s3://your-staging-bucket\n\n  deploy-production:\n    needs: deploy-staging\n    runs-on: ubuntu-latest\n    environment: production\n    steps:\n      - uses: actions/checkout@v4\n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v4\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: ${{ env.AWS_REGION }}\n      - name: Deploy to Production\n        run: | \n          aws s3 sync ./build s3://your-production-bucket\n</code></pre>"},{"location":"02-actions-automation/#manual-approvals-for-production","title":"Manual Approvals for Production","text":"<pre><code>jobs:\n  deploy-production:\n    environment:\n      name: production\n      url: https://your-app.com\n</code></pre>"},{"location":"02-actions-automation/#rollback-strategies","title":"Rollback Strategies","text":"<ul> <li>Immutable deployments: Deploy new versions alongside old ones, then switch traffic.</li> <li>Versioned artifacts: Store all deployment artifacts with unique versions.</li> <li>Automated rollback workflows: Trigger rollback on failed health checks.</li> </ul>"},{"location":"02-actions-automation/#security-best-practices","title":"Security Best Practices","text":""},{"location":"02-actions-automation/#oidc-for-aws-authentication","title":"OIDC for AWS Authentication","text":"<pre><code>jobs:\n  deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      id-token: write # This is required for requesting the JWT\n      contents: read # This is required for actions/checkout\n    steps:\n      - uses: the actions/checkout@v4\n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v4\n        with: \n          role-to-use: arn:aws:iam::123456789012:role/github-actions-role\n          aws-region: us-east-1\n</code></pre>"},{"location":"02-actions-automation/#pinning-actions-to-full-length-shas","title":"Pinning Actions to Full-Length SHAs","text":"<pre><code># Bad practice: uses a mutable tag\n- uses: the actions/checkout@v4\n\n# Good practice: uses the immutable SHA\n- uses: the actions/checkout@b4ffde65f46336ab88eb53be80849d7340846 # v4.1.1\n</code></pre>"},{"location":"02-actions-automation/#secret-management","title":"Secret Management","text":"<ul> <li>Use GitHub Encrypted Secrets for sensitive data.</li> <li>Avoid hardcoding secrets in workflows.</li> <li>Grant minimal necessary permissions to secrets.</li> </ul>"},{"location":"02-actions-automation/#code-scanning-with-codeql","title":"Code Scanning with CodeQL","text":"<pre><code># .github/workflows/codeql.yml\nname: CodeQL\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 2 * * 1' # At 02:00 on Monday\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      security-events: write\n      actions: read\n      contents: read\n\n    steps:\n      - name: Checkout repository\n        uses: the actions/checkout@v4\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v3\n        with:\n          languages: javascript\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v3\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v3\n</code></pre>"},{"location":"02-actions-automation/#workflow-optimization","title":"Workflow Optimization","text":""},{"location":"02-actions-automation/#matrix-builds","title":"Matrix Builds","text":"<pre><code>jobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [18, 20]\n    steps:\n      - uses: actions/checkout@v4\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ matrix.node-version }}\n      - run: npm ci\n      - run: npm test\n</code></pre>"},{"location":"02-actions-automation/#reusable-workflows","title":"Reusable Workflows","text":"<pre><code># .github/workflows/reusable-build.yml\nname: Reusable Build\n\non:\n  workflow_call:\n    inputs:\n      node-version: \n        required: true\n        type: string\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ inputs.node-version }}\n      - run: npm ci\n      - run: npm run build\n</code></pre> <pre><code># .github/workflows/main-workflow.yml\nname: Main Workflow\n\non: [push]\n\njobs:\n  call-build:\n    uses: ./.github/workflows/reusable-build.yml\n    with:\n      node-version: '20'\n</code></pre>"},{"location":"02-actions-automation/#self-hosted-runners","title":"Self-Hosted Runners","text":"<p>For specific hardware/software requirements or increased productivity.</p>"},{"location":"02-actions-automation/#monitoring-and-troubleshooting","title":"Monitoring and Troubleshooting","text":""},{"location":"02-actions-automation/#github-actions-ui","title":"GitHub Actions UI","text":"<ul> <li>Workflow runs: View logs, re-run jobs, cancel workflows.</li> <li>Workflow insights: Monitor usage, duration, and success rates.</li> </ul>"},{"location":"02-actions-automation/#github-cli","title":"GitHub CLI","text":"<pre><code>gh run list\ngh run view &lt;run-id&gt;\n</code></pre>"},{"location":"02-actions-automation/#custom-logging-and-alerts","title":"Custom Logging and Alerts","text":"<p>Integrate with external logging services (e.g., Datadog, Splunk) and alerting (e.g., PagerDuty).</p>"},{"location":"02-actions-automation/#anti-patterns-and-warning-signs","title":"Anti-Patterns and Warning Signs","text":""},{"location":"02-actions-automation/#workflow-anti-patterns","title":"Workflow Anti-Patterns","text":"<ul> <li>Monolithic workflows: Single, huge workflow for everything.</li> <li>Hardcoded values: Lack of environment variables or secrets.</li> <li>Lack of caching: Re-downloading dependencies every run.</li> <li>Ignoring failures: Not configuring proper error handling.</li> <li>Over-reliance on UI: Not using workflow_dispatch or workflow_call.</li> </ul>"},{"location":"02-actions-automation/#warning-signs-in-automation","title":"Warning Signs in Automation","text":"<ul> <li>CI/CD pipelines are consistently failing.</li> <li>Deployments are manual or inconsistent.</li> <li>Security vulnerabilities are frequently discovered late in the Bias.</li> <li>Developers spend too much time debugging pipelines.</li> </ul>"},{"location":"02-actions-automation/#expert-notes-automation-as-a-force-multiplier","title":"Expert Notes: Automation as a Force Multiplier","text":"<p>Elite Team Insight: Automation isn't just about reducing manual effort; it's about consistency, reliability, and freeing up engineers to focus on higher-value tasks. A well-automated pipeline is a force multiplier for your team.</p> <p>Scaling Tip: As your team grows, invest in reusable workflows and self-hosted runners for specialized tasks. This reduces duplication and provides greater control over your build environment.</p> <p>Security Note: Never hardcode secrets. Always use GitHub Encrypted Secrets or OIDC for authentication. Pin your actions to full-length SHAs to prevent supply chain attacks.</p>"},{"location":"02-actions-automation/#implementation-checklist","title":"Implementation Checklist","text":""},{"location":"02-actions-automation/#day-1-setup","title":"Day 1 Setup","text":"<ul> <li> Create basic CI workflow (lint, test, build)</li> <li> Configure branch protection with required status checks</li> <li> Implement caching for dependencies</li> <li> Set up basic deployment to a staging environment</li> </ul>"},{"location":"02-actions-automation/#small-team-evolution","title":"Small Team Evolution","text":"<ul> <li> Add CodeQL for security scanning</li> <li> Implement multi-environment deployments (staging, production)</li> <li> Configure manual approvals for production deployments</li> <li> Explore matrix builds for testing across environments</li> </ul>"},{"location":"02-actions-automation/#scaling-to-mid-sized-teams","title":"Scaling to Mid-sized Teams","text":"<ul> <li> Create reusable workflows for common tasks</li> <li> Implement OIDC for credentials, not just AWS</li> <li> Set up advanced monitoring and alerting</li> <li> Use self-hosted runners for specialized tasks</li> </ul>"},{"location":"02-actions-automation/#large-organization-governance","title":"Large Organization Governance","text":"<ul> <li> Standardize workflow templates across repositories</li> <li> Centralize secret management</li> <li> Establish dedicated SRE/DevOps team for pipeline maintenance</li> <li> Integrate with enterprise tools for security and compliance</li> </ul> <p>Last updated: 2025-08-22</p>"},{"location":"03-governance/","title":"Governance &amp; Security: Enforcing Standards at Scale","text":""},{"location":"03-governance/#introduction","title":"Introduction","text":"<p>As engineering organizations grow, maintaining security, compliance, and consistency across repositories becomes a critical challenge. This section outlines a comprehensive governance and security framework using GitHub's built-in features and best practices. It covers repository structure, branch protection, code ownership, and security policies to help you enforce standards at scale.</p>"},{"location":"03-governance/#standardized-repository-structure","title":"Standardized Repository Structure","text":""},{"location":"03-governance/#recommended-repository-layout","title":"Recommended Repository Layout","text":"<pre><code>/\n\u251c\u2500\u2500 .github/                 # GitHub-specific configurations\n\u2502   \u251c\u2500\u2500 ISSUE_TEMPLATE/      # Issue templates\n\u2502   \u251c\u2500\u2500 workflows/           # GitHub Actions workflows\n\u2502   \u2514\u2500\u2500 PULL_REQUEST_TEMPLATE.md\n\u251c\u2500\u2500 docs/                    # Documentation\n\u251c\u2500\u2500 src/                     # Source code\n\u251c\u2500\u2500 tests/                   # Tests\n\u251c\u2500\u2500 scripts/                 # Helper scripts\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 CODE_OF_CONDUCT.md\n\u251c\u2500\u2500 CONTRIBUTING.md\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 SECURITY.md\n</code></pre>"},{"location":"03-governance/#repository-templates","title":"Repository Templates","text":"<p>Create repository templates for different project types (e.g., service, library, website) to enforce this structure from the start.</p>"},{"location":"03-governance/#branch-protection-rules","title":"Branch Protection Rules","text":""},{"location":"03-governance/#protecting-critical-branches","title":"Protecting Critical Branches","text":"Branch Pattern Protection Rule Rationale <code>main</code> Require PR, status checks, 2 approvals Protect production code <code>develop</code> Require PR, status checks, 1 approval Protect integration branch <code>release/*</code> Require PR, status checks Protect release candidates"},{"location":"03-governance/#enforcing-linear-history","title":"Enforcing Linear History","text":"<ul> <li>Best for: Teams that prefer a clean, readable Git history.</li> <li>How: Enable \"Require linear history\" in branch protection.</li> </ul>"},{"location":"03-governance/#requiring-signed-commits","title":"Requiring Signed Commits","text":"<ul> <li>Best for: High-security projects or open-source.</li> <li>How: Enable \"Require signed commits\" to verify commit authorship.</li> </ul>"},{"location":"03-governance/#codeowners","title":"CODEOWNERS","text":""},{"location":"03-governance/#basic-codeowners-file","title":"Basic CODEOWNERS File","text":"<pre><code># .github/CODEOWNERS\n\n# Global owner\n*       @global-owner\n\n# Frontend code\n/src/frontend/ @frontend-team\n\n# Backend code\n/src/backend/  @backend-team\n\n# Documentation\n/docs/        @docs-team\n</code></pre>"},{"location":"03-governance/#advanced-codeowners-patterns","title":"Advanced CODEOWNERS Patterns","text":"<ul> <li>Multiple owners: <code>/src/api/ @api-lead @security-expert</code></li> <li>Optional owners: <code>^/src/optional/ @optional-team</code></li> <li>Per-file owners: <code>package.json @dependency-manager</code></li> </ul>"},{"location":"03-governance/#security-policies-and-procedures","title":"Security Policies and Procedures","text":""},{"location":"03-governance/#securitymd","title":"SECURITY.md","text":"<p>Your <code>SECURITY.md</code> file should include: - Supported versions: Which versions of your project are currently supported with security updates. - Reporting a vulnerability: A clear, private process for reporting vulnerabilities. - Security advisories: Links to past security advisories.</p>"},{"location":"03-governance/#github-security-advisories","title":"GitHub Security Advisories","text":"<ul> <li>Use GitHub Security Advisories to privately discuss, fix, and publish information about security vulnerabilities.</li> </ul>"},{"location":"03-governance/#dependabot","title":"Dependabot","text":"<ul> <li>Version updates: Automatically keep your dependencies up-to-date.</li> <li>Security updates: Automatically create PRs to fix vulnerable dependencies.</li> </ul> <pre><code># .github/dependabot.yml\nversion: 2\nupdates:\n  - package-ecosystem: \"npm\"\n    directory: \"/\"\n    schedule:\n      interval: \"weekly\"\n</code></pre>"},{"location":"03-governance/#compliance-and-auditing","title":"Compliance and Auditing","text":""},{"location":"03-governance/#audit-logs","title":"Audit Logs","text":"<ul> <li>Use GitHub's audit logs to review actions performed by users in your organization.</li> </ul>"},{"location":"03-governance/#required-workflows","title":"Required Workflows","text":"<ul> <li>For enterprise-level compliance, use required workflows to enforce specific CI/CD jobs across all repositories.</li> </ul>"},{"location":"03-governance/#anti-patterns-and-warning-signs","title":"Anti-Patterns and Warning Signs","text":"<ul> <li>Overly restrictive rules: Branch protection that slows down development unnecessarily.</li> <li>Stale CODEOWNERS: The <code>CODEOWNERS</code> file is not kept up-to-date with team changes.</li> <li>Ignoring Dependabot alerts: Letting security vulnerabilities pile up.</li> <li>Public vulnerability disclosure: Reporting security issues in public channels.</li> </ul>"},{"location":"03-governance/#expert-notes-governance-as-an-enabler","title":"Expert Notes: Governance as an Enabler","text":"<p>Elite Team Insight: Governance should be an enabler, not a blocker. The goal is to provide a secure, consistent foundation that empowers developers to ship code with confidence.</p> <p>Scaling Tip: As your organization grows, consider a tiered approach to governance. Allow more flexibility for experimental projects while enforcing stricter controls on production-critical repositories.</p> <p>Security Note: Automate as much of your security process as possible. Use Dependabot, CodeQL, and other tools to catch vulnerabilities early and often.</p>"},{"location":"03-governance/#implementation-checklist","title":"Implementation Checklist","text":""},{"location":"03-governance/#day-1-setup","title":"Day 1 Setup","text":"<ul> <li> Create a <code>SECURITY.md</code> file.</li> <li> Configure basic branch protection for <code>main</code>.</li> <li> Enable Dependabot for security updates.</li> </ul>"},{"location":"03-governance/#small-team-evolution","title":"Small Team Evolution","text":"<ul> <li> Create a <code>CODEOWNERS</code> file.</li> <li> Define repository templates.</li> <li> Implement stricter branch protection rules.</li> </ul>"},{"location":"03-governance/#scaling-to-mid-sized-teams","title":"Scaling to Mid-sized Teams","text":"<ul> <li> Use required workflows for compliance.</li> <li> Implement a formal security advisory process.</li> <li> Conduct regular security audits.</li> </ul>"},{"location":"03-governance/#large-organization-governance","title":"Large Organization Governance","text":"<ul> <li> Establish a dedicated security team.</li> <li> Integrate with enterprise-level compliance tools.</li> <li> Implement automated governance-as-code solutions.</li> </ul> <p>Last updated: 2025-08-22</p>"},{"location":"04-repo-structure/","title":"Repository Structure: Organizing for Scale","text":""},{"location":"04-repo-structure/#introduction","title":"Introduction","text":"<p>Effective repository structure is crucial for maintaining clarity, scalability, and collaboration within engineering teams. This section outlines best practices for organizing your codebase, managing dependencies, and structuring repositories to support diverse project types and team sizes. It covers strategies for monorepos, polyrepos, and hybrid approaches, ensuring your project layout promotes efficient development and clear ownership.</p>"},{"location":"04-repo-structure/#monorepo-vs-polyrepo-strategies","title":"Monorepo vs. Polyrepo Strategies","text":""},{"location":"04-repo-structure/#monorepo-single-repository-multiple-projects","title":"Monorepo (Single Repository, Multiple Projects)","text":"<p>Advantages: - Simplified dependency management: Easier to manage shared libraries and internal dependencies. - Atomic changes: A single commit can span multiple projects, ensuring consistency. - Cross-project refactoring: Easier to make large-scale changes across the entire codebase. - Unified tooling: Consistent build, test, and deployment processes.</p> <p>Disadvantages: - Tooling complexity: Requires advanced tooling (e.g., Bazel, Nx, Lerna) for efficient builds. - Steeper learning curve: New developers may find the codebase overwhelming. - CI/CD challenges: Can lead to longer CI/CD times if not optimized for incremental builds.</p> <p>Best Use Cases: - Large organizations with many interdependent services. - Teams that prioritize code sharing and consistent practices. - Projects with frequent cross-cutting changes.</p>"},{"location":"04-repo-structure/#polyrepo-multiple-repositories-single-project-per-repo","title":"Polyrepo (Multiple Repositories, Single Project per Repo)","text":"<p>Advantages: - Simplicity: Easier to set up and manage for smaller teams. - Clear ownership: Each repository has a distinct owner and purpose. - Independent deployments: Services can be deployed independently. - Faster CI/CD: CI/CD pipelines are typically faster as they only build one project.</p> <p>Disadvantages: - Dependency management overhead: Managing shared libraries across repositories can be complex. - Inconsistent tooling: Different projects may use different build/deployment tools. - Cross-project changes: Refactoring across repositories can be cumbersome.</p> <p>Best Use Cases: - Small to medium-sized teams. - Microservices architectures where services are loosely coupled. - Open-source projects with distinct components.</p>"},{"location":"04-repo-structure/#hybrid-approach","title":"Hybrid Approach","text":"<p>Combines aspects of both, e.g., a monorepo for tightly coupled services and polyrepos for independent applications.</p>"},{"location":"04-repo-structure/#recommended-repository-layouts","title":"Recommended Repository Layouts","text":""},{"location":"04-repo-structure/#standard-application-layout","title":"Standard Application Layout","text":"<pre><code>my-app/\n\u251c\u2500\u2500 .github/             # GitHub-specific configurations (workflows, templates)\n\u251c\u2500\u2500 docs/                # Project documentation\n\u251c\u2500\u2500 src/                 # Source code (e.g., /src/main, /src/test)\n\u251c\u2500\u2500 tests/               # Unit and integration tests\n\u251c\u2500\u2500 build/               # Build outputs (e.g., dist/, target/)\n\u251c\u2500\u2500 config/              # Configuration files (e.g., application.yml)\n\u251c\u2500\u2500 scripts/             # Helper scripts (e.g., setup.sh, deploy.sh)\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 CONTRIBUTING.md\n\u251c\u2500\u2500 CHANGELOG.md\n\u2514\u2500\u2500 package.json / pom.xml / requirements.txt (etc.)\n</code></pre>"},{"location":"04-repo-structure/#librarymodule-layout","title":"Library/Module Layout","text":"<pre><code>my-library/\n\u251c\u2500\u2500 .github/\n\u251c\u2500\u2500 docs/\n\u251c\u2500\u2500 src/\n\u251c\u2500\u2500 tests/\n\u251c\u2500\u2500 examples/            # Usage examples\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 LICENSE\n\u2514\u2500\u2500 package.json / setup.py (etc.)\n</code></pre>"},{"location":"04-repo-structure/#monorepo-layout-example-lernanx","title":"Monorepo Layout (Example: Lerna/Nx)","text":"<pre><code>my-monorepo/\n\u251c\u2500\u2500 .github/\n\u251c\u2500\u2500 docs/\n\u251c\u2500\u2500 packages/            # Contains individual projects/packages\n\u2502   \u251c\u2500\u2500 service-a/\n\u2502   \u251c\u2500\u2500 service-b/\n\u2502   \u2514\u2500\u2500 shared-ui/\n\u251c\u2500\u2500 tools/               # Monorepo-specific tooling/scripts\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 lerna.json / nx.json (etc.)\n\u2514\u2500\u2500 package.json\n</code></pre>"},{"location":"04-repo-structure/#managing-dependencies","title":"Managing Dependencies","text":""},{"location":"04-repo-structure/#dependency-pinning","title":"Dependency Pinning","text":"<ul> <li>Rationale: Ensures reproducible builds and prevents unexpected breaking changes.</li> <li>How: Pin dependencies to exact versions in <code>package.json</code>, <code>requirements.txt</code>, <code>pom.xml</code>, etc.</li> </ul>"},{"location":"04-repo-structure/#dependency-updates","title":"Dependency Updates","text":"<ul> <li>Automated: Use Dependabot or Renovate to automate dependency updates.</li> <li>Scheduled: Schedule regular dependency update days/sprints.</li> </ul>"},{"location":"04-repo-structure/#supply-chain-security","title":"Supply Chain Security","text":"<ul> <li>Vulnerability scanning: Integrate tools like Snyk, GitHub CodeQL, or Trivy.</li> <li>SBOMs: Generate Software Bill of Materials for better visibility.</li> <li>Private package registries: Host internal packages securely.</li> </ul>"},{"location":"04-repo-structure/#visibility-and-discoverability","title":"Visibility and Discoverability","text":""},{"location":"04-repo-structure/#readmemd-best-practices","title":"README.md Best Practices","text":"<ul> <li>Clear purpose: What does this repo do?</li> <li>Quickstart: How to get started in 5 minutes.</li> <li>Badges: CI status, code coverage, license, etc.</li> <li>Table of Contents: For longer READMEs.</li> <li>Links: To documentation, contributing guide, live demos.</li> </ul>"},{"location":"04-repo-structure/#project-documentation","title":"Project Documentation","text":"<ul> <li>Centralized: Use a <code>docs/</code> folder or a dedicated documentation site (e.g., MkDocs).</li> <li>Up-to-date: Integrate documentation updates into your CI/CD pipeline.</li> </ul>"},{"location":"04-repo-structure/#repository-topics","title":"Repository Topics","text":"<ul> <li>Use GitHub topics to categorize repositories and improve discoverability.</li> </ul>"},{"location":"04-repo-structure/#anti-patterns-and-warning-signs","title":"Anti-Patterns and Warning Signs","text":"<ul> <li>God repositories: Single repository containing unrelated projects.</li> <li>Undocumented dependencies: No clear record of external dependencies.</li> <li>Stale branches: Long-lived, unmerged branches.</li> <li>Inconsistent structure: Different projects follow different conventions.</li> <li>Lack of discoverability: Developers struggle to find relevant code or documentation.</li> </ul>"},{"location":"04-repo-structure/#expert-notes-structure-as-a-foundation","title":"Expert Notes: Structure as a Foundation","text":"<p>Elite Team Insight: A well-defined repository structure is not just about organization; it's a foundational element for scalability, maintainability, and developer productivity. It sets the stage for efficient collaboration.</p> <p>Scaling Tip: For large organizations, consider a </p> <p>Last updated: 2025-08-22</p>"},{"location":"05-metrics-and-devex/","title":"Metrics &amp; Developer Experience: Measuring What Matters","text":""},{"location":"05-metrics-and-devex/#introduction","title":"Introduction","text":"<p>Elite engineering teams understand that what gets measured gets improved. This section focuses on establishing meaningful metrics to track engineering effectiveness and enhance the Developer Experience (DevEx). It covers key performance indicators (KPIs) like the DORA metrics, strategies for collecting feedback, and how to use data to drive continuous improvement in your development workflows.</p>"},{"location":"05-metrics-and-devex/#dora-metrics-measuring-software-delivery-performance","title":"DORA Metrics: Measuring Software Delivery Performance","text":"<p>The DORA (DevOps Research and Assessment) metrics are a set of four key metrics that provide a holistic view of software delivery performance:</p> <ol> <li> <p>Deployment Frequency (DF): How often an organization successfully releases to production.</p> <ul> <li>Why it matters: Higher frequency indicates smaller batch sizes, faster feedback, and reduced risk.</li> <li>Measurement: Number of successful deployments to production per unit of time (e.g., per day, per week).</li> </ul> </li> <li> <p>Lead Time for Changes (LTFC): The time it takes for a commit to get into production.</p> <ul> <li>Why it matters: Shorter lead time indicates efficient processes, less work-in-progress, and faster response to market changes.</li> <li>Measurement: Time from first commit to successful deployment in production.</li> </ul> </li> <li> <p>Change Failure Rate (CFR): The percentage of deployments to production that result in a degraded service or require rollback.</p> <ul> <li>Why it matters: Lower failure rate indicates higher quality and stability.</li> <li>Measurement: (Number of failed deployments / Total number of deployments) * 100.</li> </ul> </li> <li> <p>Mean Time to Recovery (MTTR): The time it takes to restore service after a disruption.</p> <ul> <li>Why it matters: Shorter MTTR indicates effective incident response and resilience.</li> <li>Measurement: Time from incident detection to service restoration.</li> </ul> </li> </ol>"},{"location":"05-metrics-and-devex/#benchmarks-from-accelerate-book","title":"Benchmarks (from Accelerate book)","text":"Metric Low Performers Medium Performers High Performers Elite Performers Deployment Frequency &lt; 1 / month 1 / month - 1 / week 1 / week - 1 / day &gt; 1 / day Lead Time for Changes &gt; 6 months 1 month - 1 week 1 week - 1 day &lt; 1 day Change Failure Rate 46-60% 31-45% 16-30% 0-15% Mean Time to Recovery &gt; 1 week 1 day - 1 week &lt; 1 day &lt; 1 hour"},{"location":"05-metrics-and-devex/#developer-experience-devex","title":"Developer Experience (DevEx)","text":"<p>Developer Experience (DevEx) refers to how developers feel about their daily work, tools, and processes. A positive DevEx leads to higher productivity, job satisfaction, and retention.</p>"},{"location":"05-metrics-and-devex/#key-aspects-of-devex","title":"Key Aspects of DevEx","text":"<ul> <li>Onboarding: How quickly new team members become productive.</li> <li>Tooling: Efficiency and reliability of development tools.</li> <li>Feedback Loops: Speed and clarity of feedback from tests, CI/CD, and peers.</li> <li>Documentation: Accessibility and accuracy of internal documentation.</li> <li>Cognitive Load: The mental effort required to understand and navigate systems.</li> </ul>"},{"location":"05-metrics-and-devex/#measuring-devex","title":"Measuring DevEx","text":"<ol> <li>Developer Surveys: Regularly collect qualitative feedback.<ul> <li>Example Questions:<ul> <li></li> </ul> </li> </ul> </li> </ol>"}]}